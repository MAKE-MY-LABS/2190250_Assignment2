/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javaassignment;

import java.time.LocalDate;
import java.util.ArrayList;

import javaassignment.exception.InsufficientBalanceException;
import javaassignment.model.Account;
import javaassignment.model.SBAccount;
import javaassignment.service.BankService;
import javaassignment.model.FDAccount;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        //Create BankService object
        BankService bankService = BankService.getInstance();
        // Create SBAccount object using BankService
        Account sbAccount = bankService.openSBAccount(1, LocalDate.now(), 1000, 10000);
        System.out.println("*****************SBAccount Details after initial creation*****************");
        System.out.println(sbAccount.getAccountDetails());
        // Deposit 5000 in SBAccount using BankService
        sbAccount = bankService.depositeInSBAccount((SBAccount) sbAccount, 5000);
        System.out.println("*****************SBAccount Details after depositing 5000*****************");
        //Print account details
        System.out.println(sbAccount.getAccountDetails());
        System.out.println("*****************SBAccount Transaction Details after depositing 5000*****************");
        //Print all transactions
        System.out.println(sbAccount.getTransactionDetails());
        // Withdraw 2000 from SBAccount using BankService
        try {
            sbAccount = bankService.withdrawFromSBAccount((SBAccount) sbAccount, 2000);
            System.out.println("*****************SBAccount Details after withdrawing 2000*****************");
            //Print account details
            System.out.println(sbAccount.getAccountDetails());
            System.out.println("*****************SBAccount Transaction Details after withdrawing 2000*****************");
            //Print all transactions
            System.out.println(sbAccount.getTransactionDetails());
        } catch (InsufficientBalanceException e) {
            System.out.println(e.getMessage());
        }
        // Withdraw 12500 from SBAccount using BankService to check InsufficientBalanceException
        try {
            System.out.println("*****************Lets check if we try to withdraw money from SBAccount where minimum balance is not getting maintained*****************");
            sbAccount = bankService.withdrawFromSBAccount((SBAccount) sbAccount, 12500);
        } catch (InsufficientBalanceException e) {
            System.out.println("Exception occurred with message: "+e.getMessage());
        }

        // Create FDAccount object using BankService
         Account fdAccount = bankService.openFDAccount(2, LocalDate.now(), LocalDate.now().plusYears(2), 5, 10000);
        System.out.println("*****************FDAccount Details after initial creation*****************");
        System.out.println(fdAccount.getAccountDetails());
        //Call getTenure method to get tenure
        System.out.println("Tenure of FDAccount is "+bankService.getTenure((FDAccount) fdAccount));
        //Call getMaturityAmount method to get maturity amount
        System.out.println("Maturity amount of FDAccount is "+bankService.getMaturityAmount((FDAccount) fdAccount));

    }
}
