package javaassignment.service;

/* 
 * This Java source file was generated by the Gradle 'init' task.
 * This class is a singleton class which provides services to open SBAccount, deposit in SBAccount, withdraw from SBAccount, open FDAccount, get tenure and get maturity amount.
 * It has a private constructor and a static method getInstance which returns the instance of the class.
 * It has methods to open SBAccount, deposit in SBAccount, withdraw from SBAccount, open FDAccount, get tenure and get maturity amount.
 * It has a private static instance of the class.
 */
import javaassignment.model.FDAccount;
import javaassignment.model.SBAccount;
import javaassignment.exception.InsufficientBalanceException;
import java.time.LocalDate;
import java.util.ArrayList;

public class BankService {
    private static BankService bankService;

    private BankService() {
    }

    public static BankService getInstance() {
        if (bankService == null) {
            bankService = new BankService();
        }
        return bankService;
    }

    public SBAccount openSBAccount(int accountNumber, LocalDate accountCreationDate, double minimumBalance, double balance) {
        return new SBAccount(accountNumber, accountCreationDate, minimumBalance, balance, new ArrayList<>());
    }

    public SBAccount depositeInSBAccount(SBAccount sbAccount, double amount) {
        sbAccount.deposite(amount);
        return sbAccount;
    }

    public SBAccount withdrawFromSBAccount(SBAccount sbAccount, double amount) throws InsufficientBalanceException {
        sbAccount.withdraw(amount);
        return sbAccount;
    }

    public FDAccount openFDAccount(int accountNumber, LocalDate accountCreationDate, LocalDate maturityDate, double interestRate, double amount) {
        return new FDAccount(accountNumber, accountCreationDate, maturityDate, interestRate, amount, new ArrayList<>());
    }

    public long getTenure(FDAccount fdAccount) {
        return fdAccount.getTenure();
    }

    public double getMaturityAmount(FDAccount fdAccount) {
        return fdAccount.getMaturityAmount();
    }
}
